// 22.S.O.L.I.D五大原则之依赖倒置原则DIP.js Dependence Inversion Principle
// 总结：依赖倒置原则  我的理解是为了当增加种类的时候不要去修改高层，只要添加底层就行，感觉很多设计模式都是围绕这个来的
// A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。
// B.抽象不应该依赖于具体，具体应该依赖于抽象。
// 
//依赖注入
//依赖注入的理解就是不要在一个类中实例化两次不同的东西，应该把其他需要实例化的依赖放到一个容器中
//
//
//
//****依赖注入看这个链接，讲的好http://www.cnblogs.com/fuchongjundream/p/3873073.html



第二次观看的理解
1.依赖：大的依赖小的，比如播放器播放文件，则是播放器需要依赖文件
2.依赖倒置：耦合关系就是依赖关系，减少耦合，所以需要减少依赖
这个在大话设计模式中是：第五章，依赖倒转原则  修电脑和收音机的区别
A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。
B.抽象不应该依赖于具体，具体应该依赖于抽象。
对于A新的解读：上层和下层模块都应该依赖下层模块的抽象
对于B新的解读：抽象不应该依赖于具体，抽象（上层的）应该依赖（下层的）具体的抽象
3.控制反转：控制权交给了别人，比如配置文件，这样只需要配置一下文件就可以让不一样的上层控制一个不一样的下层
比如：我调用反射去实例化两个类，然后ClassA依赖ClassB,我只要在配置一下ClassA和CLassB,，然后就可以让他们具体的A去使用具体的B
插播一下：里氏替换原则，让子类完全的替换父类（具体和抽象的关系）
4.依赖注入（dependency injection）：其实控制反转只是一个思想而已，通过配置文件只是实现控制反转的一个方式
依赖注入关注的问题：哪些东东的控制权被反转了，被转移了？答案：依赖对象的创建获得了转移
我们还可以通过依赖注入来实现控制反转，依赖注入就是ioc容器在运行期间，动态的把依赖注入到容器中
比如：使用构造函数进行注入

补充我看到的关于java的spring：主要就是控制反转和AOP（面向切面），控制反转上面已经说明了，主要就是理解AOP
AOP：http://www.cnblogs.com/hongwz/p/5764917.html
例如日志，我只要在配置文件中配置好了，就可以直接在想要的所有或则个别函数中填写日志了，这个就是横向（在所有类中都具有个方法），面向对象是竖向